# -*- coding: utf-8 -*-
"""BD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G9DEU5BZGmbwv03yqAwXKXxlT1p3LUAN
"""

!pip install pymongo

from pymongo import MongoClient
from datetime import datetime

bd = "mongodb+srv://giugarrido:<senha>@aulamongo.s297u.mongodb.net/"

def conectar():
  STRING = "mongodb+srv://giugarrido:MongoAtlas2025@aulamongo.s297u.mongodb.net/"
  try:
    client = MongoClient(STRING)
    db = client["chat_bot"]
    return db["usuarios"]
  except Exception as e:
    print(f"Erro ao conectar ao MongoDB: {e}")
    return None

def criar_pessoa(nome, telefone, email, nascimento):
  try:
    total_documentos = colecao.count_documents({})
    pessoa = {
    "codigo": total_documentos+1,
    "nome": nome,
    "telefone": telefone,
    "email": email,
    "nascimento": nascimento
    }
    resultado = colecao.insert_one(pessoa)
    print(f"Pessoa inserida com ID: {resultado.inserted_id}")
    return resultado.inserted_id
  except Exception as e:
    print(f"Erro ao criar pessoa: {e}")
    return None

def listar_pessoas():
  try:
    print("\nPessoas:")
    for pessoa in colecao.find().sort("codigo"):
      print("codigo: "+str(pessoa['codigo'])+" nome: "+pessoa['nome'])
    return True
  except Exception as e:
    print(f"Erro ao listar pessoas: {e}")
    return False

def buscar_por_codigo(codigo: int):
  try:
    pessoa = colecao.find_one({"codigo": codigo})
    if pessoa:
      print("\nPessoa encontrada:")
      print("codigo: "+str(pessoa['codigo'])+" nome: "+pessoa['nome'])
      return pessoa
    else:
      print(f"Nenhuma pessoa encontrada com código {codigo}")
      return None
  except Exception as e:
    print(f"Erro ao buscar pessoa: {e}")
    return None

def atualizar_pessoa(codigo: int, novo_nome: str):
  try:
    resultado = colecao.update_one(
    {"codigo": codigo},
    {"$set": {"nome": novo_nome}}
    )
    if resultado.modified_count > 0:
      print(f"Pessoa com código {codigo} atualizada com sucesso!")
      return True
    else:
      print(f"Nenhuma pessoa encontrada com código {codigo}")
      return False
  except Exception as e:
    print(f"Erro ao atualizar pessoa: {e}")
    return False

def deletar_pessoa(codigo: int):
  try:
    resultado = colecao.delete_one({"codigo": codigo})
    if resultado.deleted_count > 0:
      print(f"Pessoa com código {codigo} removida com sucesso!")
      return True
    else:
      print(f"Nenhuma pessoa encontrada com código {codigo}")
      return False
  except Exception as e:
    print(f"Erro ao deletar pessoa: {e}")
    return False

def menu():
  while True:
    print("\n--- MENU ---")
    print("1. Criar nova pessoa")
    print("2. Listar todas as pessoas")
    print("3. Buscar pessoa por código")
    print("4. Atualizar pessoa")
    print("5. Deletar pessoa")
    print("0. Sair")
    opcao = input("Escolha uma opção: ")

    if opcao == "1":
      nome = input("Digite o nome: ")
      telefone = input("Digite o telefone: ")
      email = input("Digite o email: ")

      while True:
        nascimento = input("Digite a data de nascimento (aaaa/mm/dd): ")
        try:
          ano, mes, dia = nascimento.split('/')
          nascimento = datetime(int(ano), int(mes), int(dia))
        except ValueError:
          print("Formato de data inválido. Use o formato aaaa/mm/dd.")
          continue
        except IndexError:
          print("Formato de data inválido. Use o formato aaaa/mm/dd.")
          continue
        break
      criar_pessoa(nome, telefone, email, nascimento)

    elif opcao == "2":
      listar_pessoas()

    elif opcao == "3":
      codigo = int(input("Digite o código para buscar: "))
      buscar_por_codigo(codigo)

    elif opcao == "4":
      codigo = int(input("Digite o código da pessoa a atualizar: "))
      novo_nome = input("Digite o novo nome: ")
      atualizar_pessoa(codigo, novo_nome)

    elif opcao == "5":
      codigo = int(input("Digite o código da pessoa a deletar: "))
      deletar_pessoa(codigo)

    elif opcao == "0":
      print("Saindo do sistema...")
      break

    else:
      print("Opção inválida! Tente novamente.")

if __name__ == "__main__":
  colecao = conectar()
  if colecao is not None:
    menu()

def conversas_usuarios(bd):
    agregacao = [
        {
            "$lookup": {
                "from": "usuarios",
                "localField": "codigo",
                "foreignField": "cod",
                "as": "usuario"
            }
        }
    ]

    return list(bd.conversas.aggregate(agregacao))

def armazenar_conversas(bd, usuario_id, pergunta, resposta):
    conversa = {
        "cod": usuario_id,
        "mensagens": [
            {"tipo": "usuario", "texto": pergunta},
            {"tipo": "bot", "texto": resposta}
        ]
    }

    resultado = bd.conversas.insert_one(conversa)
    return resultado.inserted_id

